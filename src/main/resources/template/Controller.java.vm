package ${package}.${moduleName}.controller;

import java.util.Map;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import MPPageConvert;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.service.${className}Service;
import Result;
import lombok.AllArgsConstructor;
import org.laozicloud.haers.common.annotation.SysLogger;
import AbstractController;
import org.springframework.security.access.prepost.PreAuthorize;
import java.util.Arrays;



/**
 * ${comments}
 * 
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@AllArgsConstructor
@RequestMapping("/${moduleName}/${pathName}")
public class ${className}Controller  extends AbstractController {
    private final  ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @RequestMapping("/list")
    @PreAuthorize("hasRole('${moduleName}:${pathName}:list')")
    public Result list(@RequestParam Map<String, Object> params){
        //查询列表数据
        QueryWrapper<${className}> queryWrapper = new QueryWrapper<>();
        IPage<${className}> ${className}List = ${classname}Service.page(MPPageConvert.<${className}>pageParamConvert(params),queryWrapper);
        return Result.succeed(MPPageConvert.pageValueConvert(${className}List ));
    }


    /**
     * 信息
     */
    @RequestMapping("/info/{${pk.attrNameMin}}")
    @PreAuthorize("hasRole('${moduleName}:${pathName}:info')")
    public Result info(@PathVariable("${pk.attrNameMin}") ${pk.attrType} ${pk.attrNameMin}){
       return Result.succeed(${classname}Service.getById(${pk.attrNameMin}) );
    }


    /**
     * 新增${comments}
     */
    @SysLogger("新增${comments}数据")
    @RequestMapping("/save")
    @PreAuthorize("hasRole('${moduleName}:${pathName}:save')")
    public Result save(@RequestBody ${className} ${classname}){
        ${classname}Service.save(${classname});
        return Result.succeed("");
    }


    /**
     * 修改
     */
    @SysLogger("修改${comments}数据")
    @RequestMapping("/update")
    @PreAuthorize("hasRole('${moduleName}:${pathName}:update')")
    public Result update(@RequestBody ${className} ${classname}){
		${classname}Service.updateById(${classname});
       return Result.succeed("");
    }


    /**
     * 删除
     */
    @SysLogger("删除${comments}数据")
    @RequestMapping("/delete")
    @PreAuthorize("hasRole('${moduleName}:${pathName}:delete')")
    public Result delete(@RequestBody ${pk.attrType}[] ${pk.attrNameMin}s){
		${classname}Service.removeByIds(Arrays.asList(${pk.attrNameMin}s));
        return Result.succeed("");
    }
	
}
